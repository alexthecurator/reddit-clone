generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  moderator
  user
}

// System
model User {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  name  String
  role  Role?  @default(user)
  email String @unique

  // Relations
  account    Account?
  // 
  logs       Logs[]
  post       Post[]
  follows    Follows[]
  recovery   Recovery[]
  comments   Comments[]
  conference Conference[]
  channel    Channel[]
}

model Account {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  password String
  status   String? @default("active")

  // Relations
  session Session[]
  // 
  user    User      @relation(fields: [user_id], references: [id])
  user_id String    @unique
}

model Session {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?
  expiry     DateTime

  status     String? @default("active")
  token      String  @unique
  refresh_tk String

  // Relations
  account    Account? @relation(fields: [account_id], references: [id])
  account_id String?
}

model Recovery {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?
  expiry     DateTime

  token String @unique

  // Relations
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

model Logs {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  event   String
  message String
  status  String? @default("created")

  // Relations
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

// Main

model Post {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  title String    @unique
  body  String?
  votes Boolean[]

  // Relations
  conference_post Conference_Post[]
  // 
  user            User?             @relation(fields: [user_id], references: [id])
  user_id         String?

  channel    Channel? @relation(fields: [channel_id], references: [id])
  channel_id String?
}

model Channel {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  name  String? @unique
  rules String?

  // Relations
  post Post[]

  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

model Conference {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  name String? @unique

  // Relation
  conference_post Conference_Post[]
  // 
  user            User?             @relation(fields: [user_id], references: [id])
  user_id         String?
}

model Conference_Post {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  // Relation
  conference    Conference? @relation(fields: [conference_id], references: [id])
  conference_id String?
  // 
  post          Post?       @relation(fields: [post_id], references: [id])
  post_id       String?
}

model Comments {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  body  String?
  votes Boolean[]

  context    String?
  context_id String?

  // 
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

model Follows {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  context    String?
  context_id String? @unique

  // Relations
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}
